// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://hznkaddifujgchqlvqsb.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imh6bmthZGRpZnVqZ2NocWx2cXNiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcwNzM2MjAsImV4cCI6MjA3MjY0OTYyMH0._b5NiAqeD0R4Xrj9VzUMCKsFW0YOgC6Gwg4ecD4XXXM";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  },
  global: {
    headers: {
      'x-client-info': 'fittrainer-pro@1.0.0',
    },
  },
});

// Helper function to set student context for public access
export const setStudentContext = async (studentNumber?: string, studentToken?: string) => {
  try {
    console.log('üîß Definindo contexto do aluno (simplificado):', { studentNumber, studentToken });
    
    // Since RLS is disabled, we don't need to set context
    // Just ensure we're not authenticated
    const { data: { user } } = await supabase.auth.getUser();
    if (user) {
      await supabase.auth.signOut();
    }
    
    console.log('‚úÖ Contexto definido (sem RLS)');
    return { success: true };
    
  } catch (error) {
    console.error('‚ùå Erro ao definir contexto:', error);
    throw error;
  }
};

// Helper function to verify student access
export const verifyStudentAccess = async (studentNumber: string) => {
  try {
    console.log('üîç Verificando acesso direto do aluno:', studentNumber);
    
    if (!studentNumber || studentNumber.trim() === '') {
      return { 
        success: false, 
        error: 'N√∫mero do aluno √© obrigat√≥rio' 
      };
    }
    
    // Direct database query as anonymous user
    const { data: studentData, error } = await supabase
      .from('students')
      .select('id, name, student_number, unique_link_token, active, personal_trainer_id')
      .eq('student_number', studentNumber.trim())
      .eq('active', true)
      .single();
    
    if (error) {
      console.error('‚ùå Erro na consulta direta:', error);
      return { 
        success: false, 
        error: 'Aluno n√£o encontrado ou inativo.' 
      };
    }
    
    if (!studentData) {
      console.error('‚ùå Aluno n√£o encontrado');
      return { 
        success: false, 
        error: 'Aluno n√£o encontrado ou inativo' 
      };
    }
    
    console.log('‚úÖ Aluno encontrado:', studentData);
    return {
      success: true,
      student: studentData
    };
  } catch (error) {
    console.error('‚ùå Erro ao verificar acesso do aluno:', error);
    return { 
      success: false, 
      error: 'Erro interno. Tente novamente ou entre em contato com seu personal trainer.' 
    };
  }
};

// Alternative verification using token
export const verifyStudentAccessByToken = async (token: string) => {
  try {
    console.log('Verifying student access by token');
    
    if (!token || token.trim() === '') {
      return { 
        success: false, 
        error: 'Token is required' 
      };
    }
    
    // Try to find the student by token
    const { data: studentData, error: studentError } = await supabase
      .from('students')
      .select('id, name, student_number, unique_link_token, active, personal_trainer_id')
      .eq('unique_link_token', token.trim())
      .eq('active', true)
      .single();

    if (studentError || !studentData) {
      console.error('Student not found by token:', studentError);
      return { 
        success: false, 
        error: 'Invalid access token' 
      };
    }

    // Set the student context
    await setStudentContext(studentData.student_number, studentData.unique_link_token);
    
    console.log('Student verification by token successful:', studentData);
    return {
      success: true,
      student: studentData
    };
  } catch (error) {
    console.error('Error verifying student access by token:', error);
    return { 
      success: false, 
      error: 'Internal error. Please try again or contact your personal trainer.' 
    };
  }
};

export const verifyStudentAccessRPC = async (studentNumber: string) => {
  try {
    console.log('Verificando acesso do aluno via RPC:', studentNumber);
    
    if (!studentNumber || studentNumber.trim() === '') {
      return { 
        success: false, 
        error: 'N√∫mero do aluno √© obrigat√≥rio' 
      };
    }
    
    // Use the RPC function for verification
    const { data: verificationResult, error } = await supabase.rpc('verify_student_access', {
      student_number: studentNumber.trim()
    });
    
    if (error) {
      console.error('Erro na verifica√ß√£o RPC:', error);
      return { 
        success: false, 
        error: 'Erro interno na verifica√ß√£o. Tente novamente.' 
      };
    }
    
    if (!verificationResult.success) {
      return { 
        success: false, 
        error: verificationResult.error || 'Erro na verifica√ß√£o do aluno.' 
      };
    }
    
    console.log('Verifica√ß√£o bem-sucedida:', verificationResult);
    return verificationResult;
  } catch (error) {
    console.error('Erro ao verificar acesso do aluno:', error);
    return { 
      success: false, 
      error: 'Erro interno. Tente novamente ou entre em contato com seu personal trainer.' 
    };
  }
};